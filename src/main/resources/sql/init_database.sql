/* Server version: WI-V6.3.2.26540 Firebird 2.5 
   SQLDialect: 3. ODS: 11.2. Forced writes: On. Sweep inteval: 20000.
   Page size: 16384. Cache pages: 2048 (32768 Kb). Read-only: False. */
SET NAMES UTF8;

SET SQL DIALECT 3;

SET AUTODDL ON;

/* Create Domains... */
CREATE DOMAIN D_DESC_512 AS VARCHAR(512);

CREATE DOMAIN D_GUID AS VARCHAR(32);

CREATE DOMAIN D_TIMESTAMP AS TIMESTAMP;

/* Create Table... */
CREATE TABLE GEO_DATA(ID D_GUID NOT NULL,
OBJECT_ID D_GUID,
DATE_ADD D_TIMESTAMP,
DATE_DEVICE D_TIMESTAMP,
LON DOUBLE PRECISION,
LAT DOUBLE PRECISION,
SPEED DOUBLE PRECISION,
DEG DOUBLE PRECISION);


CREATE TABLE GEO_OBJECTS(ID D_GUID NOT NULL,
DESCRIPTION D_DESC_512,
LAST_GEO_DATA D_GUID);


CREATE TABLE PROPERTIES(ID INTEGER NOT NULL,
NAME VARCHAR(255) NOT NULL,
VAL BLOB);



/* Create Procedure... */
SET TERM ^ ;

CREATE PROCEDURE GET_HEX_UUID RETURNS(REAL_UUID CHAR(16) CHARACTER SET OCTETS,
HEX_UUID VARCHAR(32))
 AS
 BEGIN SUSPEND; END
^


/* Create index... */
SET TERM ; ^

CREATE INDEX GEO_DATA_OBJECT_DATE ON GEO_DATA(OBJECT_ID, DATE_DEVICE);


/* Create generator... */
CREATE GENERATOR GEN_PROPERTIES_ID;


/* Create Primary Key... */
ALTER TABLE GEO_DATA ADD CONSTRAINT PK_GEO_DATA_1 PRIMARY KEY (ID);

ALTER TABLE GEO_OBJECTS ADD CONSTRAINT PK_GEO_OBJECTS PRIMARY KEY (ID);

ALTER TABLE PROPERTIES ADD CONSTRAINT PK_PROPERTIES PRIMARY KEY (ID);

/* Create Foreign Key... */
RECONNECT;

ALTER TABLE GEO_DATA ADD CONSTRAINT FK_GEO_DATA_1 FOREIGN KEY (OBJECT_ID) REFERENCES GEO_OBJECTS (ID);

ALTER TABLE GEO_OBJECTS ADD CONSTRAINT FK_GEO_OBJECTS_1 FOREIGN KEY (LAST_GEO_DATA) REFERENCES GEO_DATA (ID);

/* Alter Procedure... */
/* Restore proc. body: GET_HEX_UUID */
SET TERM ^ ;

ALTER PROCEDURE GET_HEX_UUID RETURNS(REAL_UUID CHAR(16) CHARACTER SET OCTETS,
HEX_UUID VARCHAR(32))
 AS
declare variable i integer;
declare variable c integer;
BEGIN
real_uuid = GEN_UUID();
hex_uuid = '';
i = 0;
while (i < 16) do
begin
c = ascii_val(substring(real_uuid from i+1 for 1));
if (c < 0) then c = 256 + c;
hex_uuid = hex_uuid 
|| substring('0123456789abcdef' from bin_shr(c, 4) + 1 for 1) 
|| substring('0123456789abcdef' from bin_and(c, 15) + 1 for 1); 
i = i + 1;
end
suspend;
END
^

/* Creating trigger... */
CREATE TRIGGER GEO_DATA_AI0 FOR GEO_DATA
ACTIVE AFTER INSERT POSITION 0 
AS
begin /*$$IBE$$ 
  UPDATE GEO_OBJECTS SET LAST_GEO_DATA = NEW.ID WHERE ID = NEW.OBJECT_ID;
 $$IBE$$*/ POST_EVENT '$$IBE$$';
end
^

CREATE TRIGGER GEO_DATA_BI0 FOR GEO_DATA
ACTIVE BEFORE INSERT POSITION 0 
AS
DECLARE VARIABLE NEWID D_GUID;
BEGIN
  IF (NEW.ID IS NULL) THEN
  BEGIN
    SELECT G.HEX_UUID
    FROM GET_HEX_UUID G
    INTO :NEWID;
    NEW.ID = NEWID;
  END
  IF ((NEW.DATE_ADD IS NULL)) THEN
    NEW.DATE_ADD = 'now';
END
^

CREATE TRIGGER GEO_OBJECTS_BI0 FOR GEO_OBJECTS
ACTIVE BEFORE INSERT POSITION 0 
AS
DECLARE VARIABLE NEWID D_GUID;
BEGIN
  IF (NEW.ID IS NULL) THEN
  BEGIN
    SELECT G.HEX_UUID
    FROM GET_HEX_UUID G
    INTO :NEWID;
    NEW.ID = NEWID;
  END
END
^

CREATE TRIGGER PROPERTIES_BI FOR PROPERTIES
ACTIVE BEFORE INSERT POSITION 0 
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_properties_id,1);
end
^


/* Alter Procedure... */
/* Create(Add) privilege */
SET TERM ; ^

GRANT ALL ON GEO_DATA TO SYSDBA WITH GRANT OPTION;

GRANT ALL ON GEO_OBJECTS TO SYSDBA WITH GRANT OPTION;

GRANT ALL ON PROPERTIES TO SYSDBA WITH GRANT OPTION;


